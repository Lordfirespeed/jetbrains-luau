// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _LuauLexer.flex

package com.github.lordfirespeed.jetbrainsluau.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import static com.github.lordfirespeed.jetbrainsluau.lang.psi.LuauTypeHolder.*;


public class _LuauLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int INTERP = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\1\1\7\0\1\2\1\3\1\4\1\5\1\6"+
    "\22\0\1\2\1\0\1\7\1\10\1\0\1\11\1\0"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\10\25\1\26\1\27\1\30\1\31"+
    "\1\32\2\0\1\33\1\34\2\33\1\35\1\33\21\36"+
    "\1\37\2\36\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\36\1\54"+
    "\1\55\1\36\1\56\1\57\1\36\1\60\1\61\1\62"+
    "\1\36\1\63\1\64\1\65\1\66\1\36\1\67\1\37"+
    "\1\36\1\70\1\71\1\0\1\72\1\73\6\0\1\74"+
    "\u01a2\0\2\74\326\0\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\1\1\3\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\2\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\1\15\23\1\27\1\30\1\1\1\30\1\0"+
    "\1\31\2\0\1\32\1\33\1\0\1\34\1\0\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\4\0\1\43\1\44"+
    "\1\45\2\0\1\46\2\0\1\47\1\50\2\23\1\51"+
    "\5\23\1\52\1\53\3\23\1\54\5\23\1\55\2\0"+
    "\1\56\1\57\2\0\2\37\1\60\1\61\1\15\1\62"+
    "\1\0\1\15\1\63\3\0\1\64\2\23\1\65\1\23"+
    "\1\66\2\23\1\67\1\70\6\23\2\0\1\37\1\0"+
    "\1\50\1\23\1\71\5\23\1\72\1\73\2\23\1\57"+
    "\1\0\1\37\1\74\1\0\1\75\1\23\1\76\1\23"+
    "\1\77\2\23\1\100\1\101\2\0\1\37\1\102\1\23"+
    "\1\103\1\104\1\0\1\105\1\23\1\105\1\106";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\172\0\172\0\u01e8\0\u0225\0\172\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\172\0\172\0\u0393\0\u03d0\0\u040d\0\u044a"+
    "\0\u0487\0\172\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8\0\u05f5"+
    "\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0\0\u07dd"+
    "\0\u081a\0\172\0\172\0\u0857\0\u0894\0\364\0\172\0\u08d1"+
    "\0\u0131\0\u090e\0\172\0\u01ab\0\172\0\u094b\0\172\0\172"+
    "\0\u0988\0\172\0\u09c5\0\172\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9"+
    "\0\172\0\172\0\172\0\u0487\0\u0af6\0\172\0\u0501\0\u0b33"+
    "\0\172\0\172\0\u0b70\0\u0bad\0\u044a\0\u0bea\0\u0c27\0\u0c64"+
    "\0\u0ca1\0\u0cde\0\u044a\0\u044a\0\u0d1b\0\u0d58\0\u0d95\0\u044a"+
    "\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\172\0\u0894\0\u0f03"+
    "\0\172\0\172\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\172\0\172"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u044a\0\u121c\0\u1259\0\u044a\0\u1296\0\u044a\0\u12d3\0\u1310"+
    "\0\u044a\0\u044a\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e"+
    "\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629\0\u1666"+
    "\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u044a\0\u044a\0\u1797\0\u17d4"+
    "\0\u1811\0\u184e\0\u188b\0\u1165\0\u18c8\0\u044a\0\u1905\0\u044a"+
    "\0\u1942\0\u044a\0\u197f\0\u19bc\0\u044a\0\u044a\0\u19f9\0\u1a36"+
    "\0\u1a73\0\u044a\0\u1ab0\0\u044a\0\u044a\0\u1aed\0\u188b\0\u1b2a"+
    "\0\u1a36\0\u044a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\3\2\4\1\3\2\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\2\22\1\23\1\24\1\25\1\26\1\27\5\30"+
    "\1\31\1\3\1\32\1\33\1\30\1\34\1\35\1\36"+
    "\1\30\1\37\1\40\1\41\1\30\1\42\1\30\1\43"+
    "\1\44\1\45\1\30\1\46\1\30\1\47\1\50\1\51"+
    "\1\30\1\52\1\53\1\54\3\3\2\4\1\3\2\4"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\2\22\1\23\1\24"+
    "\1\25\1\26\1\27\5\30\1\31\1\3\1\32\1\33"+
    "\1\30\1\34\1\35\1\36\1\30\1\37\1\40\1\41"+
    "\1\30\1\42\1\30\1\43\1\44\1\45\1\30\1\46"+
    "\1\30\1\47\1\50\1\51\1\30\1\52\1\55\1\54"+
    "\1\3\77\0\2\4\1\0\2\4\66\0\3\56\1\0"+
    "\3\56\1\57\31\56\1\60\33\56\3\61\1\62\2\61"+
    "\1\62\65\61\1\62\31\0\1\63\43\0\3\64\1\0"+
    "\6\64\1\65\26\64\1\66\33\64\31\0\1\67\74\0"+
    "\1\70\63\0\1\71\10\0\1\72\64\0\1\73\104\0"+
    "\1\74\64\0\1\75\1\0\3\22\6\0\1\76\1\77"+
    "\1\0\1\100\4\0\1\22\2\0\1\76\2\0\1\77"+
    "\43\0\1\75\1\0\3\22\7\0\1\77\6\0\1\22"+
    "\5\0\1\77\53\0\1\101\74\0\1\102\74\0\1\103"+
    "\66\0\3\30\5\0\5\30\4\0\1\30\1\0\23\30"+
    "\35\0\1\104\6\0\1\105\65\0\1\106\43\0\3\107"+
    "\1\0\35\107\1\110\3\107\1\111\23\107\1\112\3\107"+
    "\23\0\3\30\5\0\5\30\4\0\1\30\1\0\12\30"+
    "\1\113\10\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\15\30\1\114\5\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\13\30\1\115\7\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\11\30\1\116\1\117"+
    "\10\30\27\0\3\30\5\0\5\30\4\0\1\30\1\0"+
    "\1\120\12\30\1\121\4\30\1\122\2\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\5\30\1\123\4\30"+
    "\1\124\10\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\13\30\1\125\7\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\7\30\1\126\3\30\1\127\7\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\15\30"+
    "\1\130\5\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\4\30\1\131\16\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\6\30\1\132\6\30\1\133\5\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\12\30"+
    "\1\134\10\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\6\30\1\135\14\30\35\0\1\136\43\0\3\137"+
    "\1\0\35\137\1\140\3\137\1\141\23\137\1\142\3\137"+
    "\4\56\3\0\61\56\1\143\3\56\1\0\75\62\4\64"+
    "\3\0\61\64\1\144\3\64\1\0\3\145\1\0\2\145"+
    "\1\0\31\145\1\146\33\145\22\0\1\147\7\0\1\150"+
    "\66\0\3\151\72\0\2\152\70\0\1\153\2\0\3\154"+
    "\72\0\3\155\5\0\3\155\10\0\6\155\21\0\4\105"+
    "\3\0\33\105\1\156\31\105\1\0\4\107\3\0\57\107"+
    "\1\157\1\107\1\160\3\107\24\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\3\30\1\161\17\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\4\30\1\162\16\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\16\30"+
    "\1\163\4\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\3\30\1\164\17\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\11\30\1\165\11\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\15\30\1\166\5\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\12\30"+
    "\1\167\10\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\2\30\1\170\20\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\11\30\1\171\11\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\17\30\1\172\3\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\14\30"+
    "\1\173\2\30\1\174\3\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\4\30\1\175\16\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\20\30\1\176\2\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\17\30"+
    "\1\177\3\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\7\30\1\200\13\30\4\0\4\137\3\0\57\137"+
    "\1\201\1\137\1\202\3\137\1\0\7\56\1\57\31\56"+
    "\1\60\33\56\12\64\1\65\26\64\1\66\33\64\3\145"+
    "\1\0\2\145\1\0\65\145\1\0\3\145\1\0\2\145"+
    "\1\0\22\145\1\146\6\145\1\203\33\145\24\0\3\151"+
    "\7\0\1\77\6\0\1\151\5\0\1\77\45\0\2\152"+
    "\17\0\1\152\53\0\3\154\72\0\3\154\16\0\1\154"+
    "\53\0\3\155\5\0\3\155\6\0\1\155\1\0\6\155"+
    "\21\0\1\105\1\204\2\105\3\0\33\105\1\156\31\105"+
    "\1\0\3\107\1\0\35\107\1\110\3\107\1\111\23\107"+
    "\1\205\44\107\1\110\3\107\1\111\23\107\1\112\3\107"+
    "\23\0\3\30\5\0\5\30\4\0\1\30\1\0\1\206"+
    "\22\30\27\0\3\30\5\0\5\30\4\0\1\30\1\0"+
    "\4\30\1\207\16\30\27\0\3\30\5\0\5\30\4\0"+
    "\1\30\1\0\16\30\1\210\4\30\27\0\3\30\5\0"+
    "\5\30\4\0\1\30\1\0\2\30\1\211\20\30\27\0"+
    "\3\30\5\0\5\30\4\0\1\30\1\0\1\212\22\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\4\30"+
    "\1\213\16\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\20\30\1\214\2\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\12\30\1\215\10\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\4\30\1\216\16\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\7\30"+
    "\1\217\13\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\11\30\1\220\11\30\4\0\3\137\1\0\35\137"+
    "\1\140\3\137\1\141\23\137\1\221\44\137\1\140\3\137"+
    "\1\141\23\137\1\142\3\137\3\203\1\222\2\145\1\0"+
    "\33\203\1\223\31\203\1\0\4\105\3\0\33\105\1\224"+
    "\31\105\24\0\3\225\5\0\3\225\10\0\6\225\44\0"+
    "\3\30\5\0\5\30\4\0\1\30\1\0\10\30\1\226"+
    "\12\30\27\0\3\30\5\0\5\30\4\0\1\30\1\0"+
    "\7\30\1\227\13\30\27\0\3\30\5\0\5\30\4\0"+
    "\1\30\1\0\4\30\1\230\16\30\27\0\3\30\5\0"+
    "\5\30\4\0\1\30\1\0\17\30\1\231\3\30\27\0"+
    "\3\30\5\0\5\30\4\0\1\30\1\0\11\30\1\232"+
    "\11\30\27\0\3\30\5\0\5\30\4\0\1\30\1\0"+
    "\1\233\22\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\15\30\1\234\5\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\11\30\1\235\11\30\27\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\4\30\1\236\16\30"+
    "\27\0\3\237\5\0\3\237\10\0\6\237\21\0\4\222"+
    "\3\0\33\222\1\240\31\222\1\0\1\203\1\241\1\203"+
    "\1\222\2\145\1\0\33\203\1\223\31\203\24\0\3\225"+
    "\5\0\3\225\10\0\6\225\16\0\1\107\25\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\5\30\1\242\15\30"+
    "\27\0\3\30\5\0\5\30\4\0\1\30\1\0\7\30"+
    "\1\243\13\30\27\0\3\30\5\0\5\30\4\0\1\30"+
    "\1\0\17\30\1\244\3\30\27\0\3\30\5\0\5\30"+
    "\4\0\1\30\1\0\12\30\1\245\10\30\27\0\3\237"+
    "\5\0\3\237\10\0\6\237\16\0\1\137\2\0\1\222"+
    "\1\246\2\222\3\0\33\222\1\240\31\222\1\0\3\203"+
    "\1\222\2\145\1\0\33\203\1\247\31\203\24\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\13\30\1\250\7\30"+
    "\4\0\4\222\3\0\33\222\1\251\31\222\24\0\3\30"+
    "\5\0\5\30\4\0\1\30\1\0\12\30\1\252\10\30"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7015];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\2\11\2\1\1\11\5\1\2\11"+
    "\5\1\1\11\17\1\2\11\2\1\1\0\1\11\2\0"+
    "\1\1\1\11\1\0\1\11\1\0\2\11\1\1\1\11"+
    "\1\1\1\11\4\0\3\11\2\0\1\11\2\0\2\11"+
    "\23\1\1\11\2\0\2\11\2\0\2\1\2\11\2\1"+
    "\1\0\2\1\3\0\20\1\2\0\1\1\1\0\15\1"+
    "\1\0\2\1\1\0\11\1\2\0\5\1\1\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _LuauLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _LuauLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 71: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 72: break;
          case 3:
            { return HASH;
            }
          // fall through
          case 73: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 74: break;
          case 5:
            { return LPAREN;
            }
          // fall through
          case 75: break;
          case 6:
            { return RPAREN;
            }
          // fall through
          case 76: break;
          case 7:
            { return MUL;
            }
          // fall through
          case 77: break;
          case 8:
            { return PLUS;
            }
          // fall through
          case 78: break;
          case 9:
            { return COMMA;
            }
          // fall through
          case 79: break;
          case 10:
            { return MINUS;
            }
          // fall through
          case 80: break;
          case 11:
            { return DOT;
            }
          // fall through
          case 81: break;
          case 12:
            { return DIV;
            }
          // fall through
          case 82: break;
          case 13:
            { return NUMBER;
            }
          // fall through
          case 83: break;
          case 14:
            { return COLON;
            }
          // fall through
          case 84: break;
          case 15:
            { return SEMI;
            }
          // fall through
          case 85: break;
          case 16:
            { return LT;
            }
          // fall through
          case 86: break;
          case 17:
            { return EQ;
            }
          // fall through
          case 87: break;
          case 18:
            { return GT;
            }
          // fall through
          case 88: break;
          case 19:
            { return IDENTIFIER;
            }
          // fall through
          case 89: break;
          case 20:
            { return LBRACK;
            }
          // fall through
          case 90: break;
          case 21:
            { return RBRACK;
            }
          // fall through
          case 91: break;
          case 22:
            { return EXPONENT;
            }
          // fall through
          case 92: break;
          case 23:
            { return LBRACE;
            }
          // fall through
          case 93: break;
          case 24:
            { return RBRACE;
            }
          // fall through
          case 94: break;
          case 25:
            { return NORMAL_STRING;
            }
          // fall through
          case 95: break;
          case 26:
            { return SHEBANG;
            }
          // fall through
          case 96: break;
          case 27:
            { return MODEQ;
            }
          // fall through
          case 97: break;
          case 28:
            { return CHAR_STRING;
            }
          // fall through
          case 98: break;
          case 29:
            { return MULEQ;
            }
          // fall through
          case 99: break;
          case 30:
            { return PLUSEQ;
            }
          // fall through
          case 100: break;
          case 31:
            { return LINE_COMMENT;
            }
          // fall through
          case 101: break;
          case 32:
            { return MINUSEQ;
            }
          // fall through
          case 102: break;
          case 33:
            { return CONCAT;
            }
          // fall through
          case 103: break;
          case 34:
            { return DIVEQ;
            }
          // fall through
          case 104: break;
          case 35:
            { return LE;
            }
          // fall through
          case 105: break;
          case 36:
            { return EQEQ;
            }
          // fall through
          case 106: break;
          case 37:
            { return GE;
            }
          // fall through
          case 107: break;
          case 38:
            { return EXPONENTEQ;
            }
          // fall through
          case 108: break;
          case 39:
            { return GRAVE_STRING;
            }
          // fall through
          case 109: break;
          case 40:
            { yybegin(INTERP); return INTERP_BEGIN;
            }
          // fall through
          case 110: break;
          case 41:
            { return DO;
            }
          // fall through
          case 111: break;
          case 42:
            { return IF;
            }
          // fall through
          case 112: break;
          case 43:
            { return IN;
            }
          // fall through
          case 113: break;
          case 44:
            { return OR;
            }
          // fall through
          case 114: break;
          case 45:
            { return NEQ;
            }
          // fall through
          case 115: break;
          case 46:
            { yybegin(YYINITIAL); return INTERP_END;
            }
          // fall through
          case 116: break;
          case 47:
            { return INTERP_MID;
            }
          // fall through
          case 117: break;
          case 48:
            { return ELLIPSIS;
            }
          // fall through
          case 118: break;
          case 49:
            { return CONCATEQ;
            }
          // fall through
          case 119: break;
          case 50:
            { return BINARY_NUMBER;
            }
          // fall through
          case 120: break;
          case 51:
            { return HEX_NUMBER;
            }
          // fall through
          case 121: break;
          case 52:
            { return AND;
            }
          // fall through
          case 122: break;
          case 53:
            { return END;
            }
          // fall through
          case 123: break;
          case 54:
            { return FOR;
            }
          // fall through
          case 124: break;
          case 55:
            { return NIL;
            }
          // fall through
          case 125: break;
          case 56:
            { return NOT;
            }
          // fall through
          case 126: break;
          case 57:
            { return ELSE;
            }
          // fall through
          case 127: break;
          case 58:
            { return THEN;
            }
          // fall through
          case 128: break;
          case 59:
            { return TRUE;
            }
          // fall through
          case 129: break;
          case 60:
            { return LONG_STRING;
            }
          // fall through
          case 130: break;
          case 61:
            { return BREAK;
            }
          // fall through
          case 131: break;
          case 62:
            { return FALSE;
            }
          // fall through
          case 132: break;
          case 63:
            { return LOCAL;
            }
          // fall through
          case 133: break;
          case 64:
            { return UNTIL;
            }
          // fall through
          case 134: break;
          case 65:
            { return WHILE;
            }
          // fall through
          case 135: break;
          case 66:
            { return ELSEIF;
            }
          // fall through
          case 136: break;
          case 67:
            { return REPEAT;
            }
          // fall through
          case 137: break;
          case 68:
            { return RETURN;
            }
          // fall through
          case 138: break;
          case 69:
            { return COMMENT;
            }
          // fall through
          case 139: break;
          case 70:
            { return FUNCTION;
            }
          // fall through
          case 140: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
