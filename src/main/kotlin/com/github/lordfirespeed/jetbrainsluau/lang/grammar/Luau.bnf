/*
BSD License

Copyright (c) 2023, Joseph Clack
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the IDENTIFIER of Rainer Schuster nor the NAMEs of its contributors
   may be used to endorse or promote products derived from this software
   without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

This grammar file derives from:

    Luau 0.583 Grammar Documentation
    https://github.com/Roblox/luau/blob/0.583/docs/_pages/grammar.md

    Lua 5.4 grammar written by Kazunori Sakamoto and Alexander Alexeev
    https://github.com/antlr/grammars-v4/blob/master/lua/Lua.g4

This grammar has not been tested.
*/
{
  parserClass="com.github.lordfirespeed.jetbrainsluau.lang.parser._LuauParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Luau"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.lordfirespeed.jetbrainsluau.lang.psi"
  psiImplPackage="com.github.lordfirespeed.jetbrainsluau.lang.psi.impl"

  elementTypeHolderClass="com.github.lordfirespeed.jetbrainsluau.lang.psi.LuauTypeHolder"
  elementTypeClass="com.github.lordfirespeed.jetbrainsluau.lang.psi.LuauElementType"
  tokenTypeClass="com.github.lordfirespeed.jetbrainsluau.lang.psi.LuauTokenType"

  tokens=[
    COMMENT="regexp:--\[(=*)\[(.|\n)*?\]\1\]"
    LINE_COMMENT="regexp:--[^\r\n\u0085\u2028\u2029]*"
    SHEBANG="regexp:#\![^\r\n\u0085\u2028\u2029]*"

    // single-character escapes: (?s)\\.
    // hex escapes: \\x[0-9a-fA-F]{2}
    // unicode escapes: \\u\{[0-9a-fA-F]+\}
    // decimal escapes: \\[0-9]{1,3}
    // newline escapes: \\z?\n
    // all escapes: (\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.)))

    // Normal string content: [^"\\\n]
    // Char string content: [^'\\\n]
    // Grave string content: ([^`\\{\n]|(\\z?\n))
    // Long string content: .

    NORMAL_STRING='regexp:"(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|[^"\\\n])*"'
    CHAR_STRING="regexp:'(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|[^'\\\n])*'"
    GRAVE_STRING="regexp:`(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|([^`\\{\n]))*`"
    LONG_STRING="regexp:\[(=*)\[(.|\n)*?\]\1\]"

    WHITE_SPACE="regexp:[ \t\u000C\r\n]+"

    AND="and"
    BREAK="break"
    DO="do"
    ELSE="else"
    ELSEIF="elseif"
    END="end"
    FALSE="false"
    FOR="for"
    FUNCTION="function"
    IF="if"
    IN="in"
    LOCAL="local"
    NIL="nil"
    NOT="not"
    OR="or"
    REPEAT="repeat"
    RETURN="return"
    THEN="then"
    TRUE="true"
    UNTIL="until"
    WHILE="while"

    PLUS="+"
    MINUS="-"
    MUL="*"
    DIV="/"
    MOD="%"
    EXPONENT="^"
    HASH="#"
    EQEQ="=="
    NEQ="~="
    LE="<="
    GE=">="
    LT="<"
    GT=">"
    EQ="="
    LPAREN="("
    RPAREN=")"
    LBRACE="{"
    RBRACE="}"
    LBRACK="["
    RBRACK="]"
    SEMI=";"
    COLON=":"
    COMMA=","
    DOT="."
    CONCAT=".."
    ELLIPSIS="..."

    PLUSEQ="+="
    MINUSEQ="-="
    MULEQ="*="
    DIVEQ="/="
    MODEQ="%="
    EXPONENTEQ="^="
    CONCATEQ="..="

    INTERP_BEGIN="regexp:`(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|[^`\\{\n])*\{"
    INTERP_MID="regexp:\}(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|[^`\\{\n])*\{"
    INTERP_END="regexp:\}(\\((x[0-9a-fA-F]{2})|(u\{[0-9a-fA-F]+\})|([0-9]{1,3}|z?\n|.))|[^`\\{\n])*`"

    // Int, Float and Exponential numbers: [0-9](_|[0-9])*(\.[0-9](_|[0-9])*)?([Ee]-?[0-9](_|[0-9])*)?
    // Hex numbers: 0[xX][0-9a-fA-F][0-9a-fA-F_]*
    // Binary numbers: 0[bB][01][01_]*

    NUMBER="regexp:[0-9](_|[0-9])*(\.[0-9](_|[0-9])*)?([Ee]-?[0-9](_|[0-9])*)?"
    HEX_NUMBER="regexp:0[xX][0-9a-fA-F][0-9a-fA-F_]*"
    BINARY_NUMBER="regexp:0[bB][01][01_]*"

    IDENTIFIER="regexp:[a-zA-Z_][a-zA-Z_0-9]*"
  ]
}

chunk ::= block
block ::= (stat ';'?)* (LastStat ';'?)?
stat ::= Assignment |
    CompoundAssignment |
    FunctionCall |
    DoBlock |
    WhileBlock |
    RepeatBlock |
    IfElseChain |
    ForRangeBlock |
    ForValuesBlock |
    FunctionDeclaration |
    LocalFunctionDeclaration |
    LocalAssignment |
    TypeDeclaration

Assignment ::= VarList '=' ExpList
CompoundAssignment ::= Var CompoundOp Exp
DoBlock ::= 'do' block 'end'
WhileBlock ::= 'while' Exp 'do' block 'end'
RepeatBlock ::= 'repeat' block 'until' Exp
IfElseChain ::=  IfBlock ElseIfBlock* ElseBlock? 'end'
IfBlock ::= 'if' Exp 'then' block
ElseIfBlock ::= 'elseif' Exp 'then' block
ElseBlock ::= 'else' block
ForRangeBlock ::= 'for' Binding '=' Exp ',' Exp [',' Exp] 'do' block 'end'
ForValuesBlock ::= 'for' BindingList 'in' ExpList 'do' block 'end'
FunctionDeclaration ::= 'function' FunctionName FunctionBody
LocalFunctionDeclaration ::= 'local' 'function' IDENTIFIER FunctionBody
LocalAssignment ::= 'local' BindingList ('=' ExpList)?
TypeDeclaration ::= ('export')? 'type' IDENTIFIER ('<' GenericTypeListWithDefaults '>')? '=' Type

LastStat ::= ('return' ExpList?) | 'break' | 'continue'

FunctionName ::= IDENTIFIER ('.' IDENTIFIER)* (':' IDENTIFIER)?
FunctionBody ::= ('<' GenericTypeList '>')? '(' (ParamList)? ')' (':' ReturnType)? block 'end'
ParamList ::= (BindingList (',' '...')?) | '...'

ExpList ::= (Exp ',')* Exp
NameList ::= IDENTIFIER (',' IDENTIFIER)*

Binding ::= IDENTIFIER (':' Type)?
BindingList ::= Binding (',' BindingList)? //(* equivalent of Lua 5.1 'namelist', except with optional type annotations *)

/* the actual grammar spec, which is left recursive (and so must be re-implemented)
var :  IDENTIFIER | prefixexp '[' exp ']' | prefixexp '.' IDENTIFIER
prefixexp ::= functioncall | ('(' exp ')') | var
functioncall ::= (prefixexp funcargs) | (prefixexp ':' IDENTIFIER funcargs)
*/

Var ::= (IDENTIFIER | '(' Exp ')' VarSuffix) VarSuffix*
VarList ::= Var (',' Var)*
PrefixExp::= VarOrExp nameAndArgs*
FunctionCall::= VarOrExp nameAndArgs+

private VarSuffix ::= nameAndArgs* ('[' Exp ']' | '.' IDENTIFIER);
private nameAndArgs ::= (':' IDENTIFIER)? FunctionArgs;

private VarOrExp ::= Var | '(' Exp ')';


Exp ::= (CastExp ( BinaryOp Exp )*) | (UnaryOp Exp ( BinaryOp Exp )*)
IfElseExp ::= 'if' Exp 'then' Exp ('elseif' Exp 'then' Exp)* 'else' Exp
private CastExp ::= SimpleExp ('::' Type)?
StringInterp ::= INTERP_BEGIN Exp ( INTERP_MID Exp )* INTERP_END
SimpleExp ::= NumberLiteral | StringLiteral | 'nil' | 'true' | 'false' | '...' | TableConstructor | AnonymousFunction | PrefixExp | IfElseExp | StringInterp
FunctionArgs ::=  ('(' ExpList? ')') | TableConstructor | StringLiteral
AnonymousFunction ::= 'function' FunctionBody

TableConstructor ::= '{' (FieldList)? '}'
FieldList ::= Field (FieldSep Field)* (FieldSep)?
Field ::= ('[' Exp ']' '=' Exp) | (IDENTIFIER '=' Exp) | Exp
FieldSep ::= ',' | ';'

CompoundOp ::= '+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '..='
BinaryOp ::= '+' | '-' | '*' | '/' | '^' | '%' | '..' | '<' | '<=' | '>' | '>=' | '==' | '~=' | 'and' | 'or'
UnaryOp ::= '-' | 'not' | '#'

SimpleType ::=
    'nil' |
    SingletonType |
    (IDENTIFIER ('.' IDENTIFIER) ('<' (TypeParams)? '>')?) |
    ('typeof' '(' Exp ')') |
    TableType |
    FunctionType |
    ('(' Type ')')

SingletonType ::= StringLiteral | 'true' | 'false'

UnionSuffix ::= ('?')* ('|' SimpleType ('?')*)+
IntersectionSuffix ::= ('&' SimpleType)*
Type ::= SimpleType (UnionSuffix | IntersectionSuffix)

GenericTypePackParameter ::= IDENTIFIER '...'
GenericTypeList ::= (IDENTIFIER (',' GenericTypeList)?) | (GenericTypePackParameter (',' GenericTypePackParameter)*)

GenericTypePackParameterWithDefault ::= IDENTIFIER '...' '=' (TypePack | VariadicTypePack | GenericTypePack)
GenericTypeListWithDefaults ::=
    (GenericTypeList (',' GenericTypePackParameterWithDefault)*) |
    (IDENTIFIER (',' IDENTIFIER)* (',' IDENTIFIER '=' Type)* (',' GenericTypePackParameterWithDefault)*) |
    (IDENTIFIER '=' Type (',' GenericTypePackParameterWithDefault)*) |
    (GenericTypePackParameterWithDefault (',' GenericTypePackParameterWithDefault)*)

TypeList ::= (Type (',' TypeList)?) | ('...' Type)
TypeParams ::= (Type | TypePack | VariadicTypePack | GenericTypePack) (',' TypeParams)?
TypePack ::= '(' (TypeList)? ')'
GenericTypePack ::= IDENTIFIER '...'
VariadicTypePack ::= '...' Type
ReturnType ::= Type | TypePack
TableIndexer ::= '[' Type ']' ':' Type
TableProp ::= IDENTIFIER ':' Type
TablePropOrIndexer ::= TableProp | TableIndexer
PropList ::= TablePropOrIndexer (FieldSep TablePropOrIndexer)* (FieldSep)?
TableType ::= '{' (PropList)? '}'
FunctionType ::= ('<' GenericTypeList '>')? '(' (TypeList)? ')' '->' ReturnType

NumberLiteral ::= NUMBER | HEX_NUMBER | BINARY_NUMBER
StringLiteral ::= NORMAL_STRING | CHAR_STRING | GRAVE_STRING | LONG_STRING